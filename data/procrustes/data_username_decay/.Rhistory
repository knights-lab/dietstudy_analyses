theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size=7),
legend.position = 'bottom',
axis.text = element_text(size=4),
axis.title = element_text(size=9),
aspect.ratio = 1) +
guides(color = guide_legend(ncol = 1)) +
annotate("text", x = 0.2, y = -0.25, label = paste0("p-value=",pval), size = 2) +
xlab(paste0("PC 1 [",percent_var[1],"%]")) +
ylab(paste0("PC 2 [",percent_var[2],"%]"))
vege_micro
173*12
400*12
3*400 + 150
2076 + 4800 + 1350
584.50 + 1250*7
9334.50 *.17
9335 *.17
require(knitr)
require(ggplot2)
require(ggbeeswarm)
require(nlme)
require(lsmeans)
# set the path for root directory
opts_knit$set(root.dir = "/Users/abby/Dropbox/FiberStudy/")
# create a directory for any seperate figures and set their resolution/format
opts_chunk$set(echo = TRUE, fig.path = "../output/Figs_2019_Jan_General_Mills_Report/", dev = c("pdf", "png"), dpi = 300)
# load metadata
source("lib/loadmetadata.R")
# for this baseline analysis we want to use all participants who completed the study. Missingv4 are still people who compelted the study
sub_map_w <- subset(sub_map_w, sub_map_w$Study_Status %in% c("Complete", "Missingv4"))
# Subject Genders in study
table(sub_map_w$Gender)
# Balance of group assignments
table(sub_map_w$Group)
# Balance of group assignments by gender
table(sub_map_w$Gender, sub_map_w$Group)
# Age distribution
mean(sub_map_w$Age)
sd(sub_map_w$Age)
# Age by group
#hist(sub_map_w$Age)
t.test(sub_map_w$Age ~ sub_map_w$Group) # no difference in age
# Baseline BMI
sub_map_w$BMI <- sub_map_w$Baseline_Weight_kg/((sub_map_w$Height_cm/100)^2)
mean(sub_map_w$BMI)
sd(sub_map_w$BMI)
t.test(sub_map_w$BMI ~ sub_map_w$Group) # no difference in BMI
# Self assessed stool history
stool_hist <- stool_hist[stool_hist$StudyID %in% sub_map_w$StudyID,]
mean(stool_hist$Usual_bristol)
sd(stool_hist$Usual_bristol)
#hist(stool_hist$Usual_bristol)
t.test(stool_hist$Usual_bristol ~ sub_map_w$Group) # no difference in usual bristol
mean(stool_hist$Movements_per_week)
sd(stool_hist$Movements_per_week)
#hist(stool_hist$Movements_per_week)
t.test(stool_hist$Movements_per_week ~ sub_map_w$Group)
# TODO: compare stool history to national averages: https://www.nature.com/articles/ajg2017213
# This is probably a good first starting point for Madeline.
plot <- subset(sub_map_l, !is.na(sub_map_l$Period))
plot <- subset(plot, plot$Study_Status %in% c("Complete", "Missingv4")) # this gets the 62 points for comparision
plot <- droplevels(plot)
# show High Low comparison with Low on the left, change factor order
plot$Int_level <- factor(plot$Int_level, levels = c("Low", "High"))
# plot weight by treatment and by time
#ggplot(plot, aes(x = Int_level, y = Weight_kg, group = StudyID)) + geom_point() + geom_line()
#ggplot(plot, aes(x = Period, y = Weight_kg, group = StudyID)) + geom_point() + geom_line()
# There doesn't appear to be any effect of treatment timing or order on weight
# longitudinal model for crossover study
# model correlation within subjects with a random intercept with a mixed effects model
wtmod <- lme(Weight_kg ~ Int_level + Period + Sequence + Gender , random = ~1|StudyID, data=plot) # added gender
summary(wtmod)
mylsmeans <- lsmeans(wtmod, "Int_level")
mylsmeansdif <- contrast(mylsmeans, interaction = "pairwise")
wtres <- summary(mylsmeansdif)
wtres
# There is no difference in weight between periods
plot <- subset(sub_map_l, sub_map_l$Study_Status %in% c("Complete", "Missingv4")) # this gets the 62 points for comparision
plot <- subset(plot, plot$Int_timing != "Baseline")
plot <- droplevels(plot)
plot$Int_timing <- factor(plot$Int_timing, c("Pre", "Post"))
plot$Int_level <- factor(plot$Int_level, c("Low", "High"))
ggplot(data = plot, aes(y = Weight_kg, x = Int_timing)) +
facet_grid(.~ Int_level) +
geom_line(aes(group = StudyID, color = Sequence)) +
scale_color_manual(values = seq_cols)+
theme_classic() +
xlab("Timing") +
ylab("Weight (kg)")
plot <- merge(VAS_l, sub_map_l, by = c("StudyID", "Visit"))
plot <- subset(plot, !is.na(plot$Period))
plot <- subset(plot, plot$Study_Status %in% c("Complete", "Missingv4")) # this gets the 62 points for comparision
plot <- droplevels(plot)
# show High Low comparison with Low on the left, change factor order
plot$Int_level <- factor(plot$Int_level, levels = c("Low", "High"))
colnames(plot)
# longitudinal model for crossover study
# model correlation within subjects with a random intercept with a mixed effects model
fullmod <- lme(HowFull ~ Int_level + Period + Sequence + Age + Gender, random = ~1|StudyID, data=plot)
summary(fullmod)
hungrymod <- lme(HowHungry ~ Int_level + Period + Sequence + Age + Gender, random = ~1|StudyID, data=plot)
summary(hungrymod)
satmod <- lme(HowSatisfied ~ Int_level + Period + Sequence + Age + Gender, random = ~1|StudyID, data=plot)
summary(satmod)
muchmod <- lme(HowMuch ~ Int_level + Period + Sequence + Age + Gender, random = ~1|StudyID, data=plot)
summary(muchmod)
mylsmeans <- lsmeans(fullmod, "Int_level")
mylsmeansdif <- contrast(mylsmeans, interaction = "pairwise")
moddiffsfull <- summary(mylsmeansdif)
mylsmeans <- lsmeans(hungrymod, "Int_level")
mylsmeansdif <- contrast(mylsmeans, interaction = "pairwise")
moddiffshungry <- summary(mylsmeansdif)
mylsmeans <- lsmeans(satmod, "Int_level")
mylsmeansdif <- contrast(mylsmeans, interaction = "pairwise")
moddiffssat <- summary(mylsmeansdif)
mylsmeans <- lsmeans(muchmod, "Int_level")
mylsmeansdif <- contrast(mylsmeans, interaction = "pairwise")
moddiffsmuch <- summary(mylsmeansdif)
VASres <- rbind(moddiffsfull,moddiffshungry,moddiffsmuch, moddiffssat)
VASres$Variable <- c("HowFull", "HowHungry", "HowSatisfied", "HowMuch")
VASres <- VASres[order(VASres$estimate),]
VASres$Variable <- factor(VASres$Variable, levels = VASres$Variable)
ggplot(VASres, aes(x = Variable, y = estimate)) +
geom_point(color = "#2F5597", cex = 3) +
geom_hline(yintercept = 0, color = "grey") +
geom_errorbar(aes(ymin=estimate-SE, ymax=estimate+SE), width=.2, color = "#2F5597") +
ylab("Low - High") +
xlab("VAS Question") +
coord_flip() +
theme_classic()
View(moddiffssat)
structure(moddiffshungry)
?predict()
library(zoo)
rollapply()
?rollapply()
citation(zoo)
"zoo"
cite(zoo)
?citation()
citation("zoon")
citation("zoo")
mytestdat <- data.frame(SampleID = rep(1,10))
mytestdat <- data.frame(SampleID = rep(1,17), StudyDayNo = seq(1:17), Fakeyfake = rev(seq(1:17)))
my_fun = function(x) {d = (length(x):1)-1; f = 2^-d; sum(f*x)}
mytestdat$weightedave <- rollapply(mytestdat$Fakeyfake, width = 17, FUN = my_fun, by.column=T, align="right", partial = T)
View(mytestdat)
mytestdat <- data.frame(SampleID = rep(1,17), StudyDayNo = seq(1:17), Fakeyfake = rev(seq(0:16)))
my_fun = function(x) {d = (length(x):1)-1; f = 2^-d; sum(f*x)}
mytestdat$weightedave <- rollapply(mytestdat$Fakeyfake, width = 17, FUN = my_fun, by.column=T, align="right", partial = T)
mytestdat <- data.frame(SampleID = rep(1,17), StudyDayNo = seq(1:17), Fakeyfake = rev(seq(0:16)))
my_fun = function(x) {d = (length(x):1)-1; f = 2^-d; sum(f*x)}
mytestdat$weightedave <- rollapply(mytestdat$Fakeyfake, width = 17, FUN = my_fun, by.column=T, align="right", partial = T)
mytestdat <- data.frame(SampleID = rep(1,17), StudyDayNo = seq(1:17), Fakeyfake = c(2,3,4,0,0,0,0,0,0,0,0,0,0,0)))
my_fun = function(x) {d = (length(x):1)-1; f = 2^-d; sum(f*x)}
mytestdat <- data.frame(SampleID = rep(1,17), StudyDayNo = seq(1:17), Fakeyfake = c(2,3,4,0,0,0,0,0,0,0,0,0,0,0))
mytestdat <- data.frame(SampleID = rep(1,17), StudyDayNo = seq(1:17), Fakeyfake = c(2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
my_fun = function(x) {d = (length(x):1)-1; f = 2^-d; sum(f*x)}
mytestdat$weightedave <- rollapply(mytestdat$Fakeyfake, width = 17, FUN = my_fun, by.column=T, align="right", partial = T)
mytestdat <- data.frame(SampleID = rep(1,17), StudyDayNo = seq(1:17), Fakeyfake = c(1:17))
my_fun = function(x) {d = (length(x):1)-1; f = 2^-d; sum(f*x)}
mytestdat$weightedave <- rollapply(mytestdat$Fakeyfake, width = 17, FUN = my_fun, by.column=T, align="right", partial = T)
mytestdat <- data.frame(SampleID = rep(1,17), StudyDayNo = seq(1:17), Fakeyfake = sample(1:17))
my_fun = function(x) {d = (length(x):1)-1; f = 2^-d; sum(f*x)}
mytestdat$weightedave <- rollapply(mytestdat$Fakeyfake, width = 17, FUN = my_fun, by.column=T, align="right", partial = T)
mytestdat <- data.frame(SampleID = rep(1,17), StudyDayNo = seq(1:17), DietDayNo = c(0:16) Fakeyfake = sample(1:17))
mytestdat <- data.frame(SampleID = rep(1,17), StudyDayNo = seq(1:17), DietDayNo = c(0:16), Fakeyfake = sample(1:17))
my_fun = function(x) {d = (length(x):1)-1; f = 2^-d; sum(f*x)}
mytestdat$weightedave <- rollapply(mytestdat$Fakeyfake, width = 17, FUN = my_fun, by.column=T, align="right", partial = T)
mytestdat <- data.frame(SampleID = rep(1,17), MbSampDayNo = seq(1:17), DietFromDayNo = c(0:16), Fakeyfake = sample(1:17))
my_fun = function(x) {d = (length(x):1)-1; f = 2^-d; sum(f*x)}
mytestdat$weightedave <- rollapply(mytestdat$Fakeyfake, width = 17, FUN = my_fun, by.column=T, align="right", partial = T)
set.seed(42)
mytestdat <- data.frame(SampleID = rep(1,17), MbSampDayNo = seq(1:17), DietFromDayNo = c(0:16), Fakeyfake = sample(1:17))
my_fun = function(x) {d = (length(x):1)-1; f = 2^-d; sum(f*x)}
mytestdat$weightedave <- rollapply(mytestdat$Fakeyfake, width = 17, FUN = my_fun, by.column=T, align="right", partial = T)
require(zoo)
source('~/Documents/Projects/dietstudy_analyses/lib/results_scripts/3_Food choices associate with microbiome composition/2_FigureS3/greengeens/phIRL_there_was_an_attempt.R', echo=TRUE)
setwd("~/Documents/Projects/dietstudy_analyses/")
# plot predictions results
load(file = "data/original.prediction.results.Rdata")
load(file = "data/species.to.test.Rdata")
load(file = "data/test_personal_diet_dat.Rdata")
species <- keepspecies
# format myresults as dataframes for plotting
# Note: should really be a function - but this will do.
mynames <- gsub("MCTs", "", names(dat))
own.diet <- data.frame(matrix(unlist(myresults$Master.own.diet), nrow = length(species), byrow = F))
rownames(own.diet) <- species
colnames(own.diet) <- mynames
others.diet <- data.frame(matrix(unlist(myresults$Master.others.diet), nrow = length(species), byrow = F))
rownames(others.diet) <- species
colnames(others.diet) <- mynames
own.microbiome <- data.frame(matrix(unlist(myresults$Master.own.microbiome), nrow = length(species), byrow = F))
rownames(own.microbiome) <- species
colnames(own.microbiome) <- mynames
scramble.diet <- data.frame(matrix(unlist(myresults$Master.scramble.diet), nrow = length(species), byrow = F))
rownames(scramble.diet) <- species
colnames(scramble.diet) <- mynames
# format for ggplot to make plots
require(ggplot2)
require(reshape2)
own.diet.melt <- rownames_to_column(own.diet, var = "Taxa")
own.diet.melt <- melt(own.diet.melt, id.vars = "Taxa", variable.name = "UserName", value.name = "own.diet.corr")
others.diet.melt <- rownames_to_column(others.diet, var = "Taxa")
others.diet.melt <- melt(others.diet.melt, id.vars = "Taxa", variable.name = "UserName", value.name = "others.diet.corr")
own.microbiome.melt <-rownames_to_column(own.microbiome, var = "Taxa")
own.microbiome.melt <- melt(own.microbiome.melt, id.vars = "Taxa", variable.name = "UserName", value.name = "own.mb.corr")
scramble.diet.melt <- rownames_to_column(scramble.diet, var = "Taxa")
scramble.diet.melt <- melt(scramble.diet.melt, id.vars = "Taxa", variable.name = "UserName", value.name = "scramble.diet.corr")
# make master df
master.df <- merge(own.diet.melt,others.diet.melt)
master.df <- merge(own.microbiome.melt, master.df)
master.df <- merge(scramble.diet.melt, master.df)
master.df.melt <- melt(master.df, id.vars = c("Taxa", "UserName"))
require(agricolae)
#Tukey
hsd=HSD.test(aov(value~variable,data=master.df.melt), "variable", group=T)
# get summary stats for plotting error bars
summary.master <- aggregate(master.df.melt$value, by = list(master.df.melt$variable), FUN = "mean")
colnames(summary.master) <- c("variable", "mean")
summary.sd <- aggregate(master.df.melt$value, by = list(master.df.melt$variable), FUN = "sd")
colnames(summary.sd) <- c("variable", "sd")
summary.master <- merge(summary.master, summary.sd)
summary.master$se <- summary.master$sd/sqrt(length(mynames)) # se is sd/sqrt(n)
summary.master <- merge(summary.master, as.data.frame(hsd$groups), by.x = "mean", by.y = "value")
summary.master
setwd("~/Documents/Projects/dietstudy_analyses/")
# plot predictions results
load(file = "data/original.prediction.results.Rdata")
load(file = "data/species.to.test.Rdata")
load(file = "data/test_personal_diet_dat.Rdata")
species <- keepspecies
mynames <- gsub("MCTs", "", names(dat))
own.diet <- data.frame(matrix(unlist(myresults$Master.own.diet), nrow = length(species), byrow = F))
rownames(own.diet) <- species
colnames(own.diet) <- mynames
others.diet <- data.frame(matrix(unlist(myresults$Master.others.diet), nrow = length(species), byrow = F))
rownames(others.diet) <- species
colnames(others.diet) <- mynames
own.microbiome <- data.frame(matrix(unlist(myresults$Master.own.microbiome), nrow = length(species), byrow = F))
rownames(own.microbiome) <- species
colnames(own.microbiome) <- mynames
scramble.diet <- data.frame(matrix(unlist(myresults$Master.scramble.diet), nrow = length(species), byrow = F))
rownames(scramble.diet) <- species
colnames(scramble.diet) <- mynames
# format for ggplot to make plots
require(ggplot2)
require(reshape2)
own.diet.melt <- rownames_to_column(own.diet, var = "Taxa")
own.diet.melt <- melt(own.diet.melt, id.vars = "Taxa", variable.name = "UserName", value.name = "own.diet.corr")
require(tibble)
own.diet.melt <- rownames_to_column(own.diet, var = "Taxa")
own.diet.melt <- melt(own.diet.melt, id.vars = "Taxa", variable.name = "UserName", value.name = "own.diet.corr")
others.diet.melt <- rownames_to_column(others.diet, var = "Taxa")
others.diet.melt <- melt(others.diet.melt, id.vars = "Taxa", variable.name = "UserName", value.name = "others.diet.corr")
own.microbiome.melt <-rownames_to_column(own.microbiome, var = "Taxa")
own.microbiome.melt <- melt(own.microbiome.melt, id.vars = "Taxa", variable.name = "UserName", value.name = "own.mb.corr")
scramble.diet.melt <- rownames_to_column(scramble.diet, var = "Taxa")
scramble.diet.melt <- melt(scramble.diet.melt, id.vars = "Taxa", variable.name = "UserName", value.name = "scramble.diet.corr")
master.df <- merge(own.diet.melt,others.diet.melt)
master.df <- merge(own.microbiome.melt, master.df)
master.df <- merge(scramble.diet.melt, master.df)
master.df.melt <- melt(master.df, id.vars = c("Taxa", "UserName"))
require(agricolae)
#Tukey
hsd=HSD.test(aov(value~variable,data=master.df.melt), "variable", group=T)
# get summary stats for plotting error bars
summary.master <- aggregate(master.df.melt$value, by = list(master.df.melt$variable), FUN = "mean")
colnames(summary.master) <- c("variable", "mean")
summary.sd <- aggregate(master.df.melt$value, by = list(master.df.melt$variable), FUN = "sd")
colnames(summary.sd) <- c("variable", "sd")
summary.master <- merge(summary.master, summary.sd)
summary.master$se <- summary.master$sd/sqrt(length(mynames)) # se is sd/sqrt(n)
summary.master <- merge(summary.master, as.data.frame(hsd$groups), by.x = "mean", by.y = "value")
summary.master
0.8327-0.6996
0.6996 - 0.5331
0.7-0.53
# plot food v microbe per person
require(reshape2)
setwd("/Users/abby/Documents/Projects/dietstudy_analyses/data/procrustes/data_username_decay")
# load datlist (out put from running correlations)
load(file = "../../../data/food_v_microbes_per_person_decay.RData")
# write out a file showing all the significant correlations from each person
#sigs <- lapply(datlist, function(x) subset(x, fdr_pval <= 0.9))
sigs <- lapply(datlist, function(x) subset(x, fdr_pval <= 0.2))
allsigs <- do.call("rbind", sigs)
# make a column with L1
allsigs$FoodL1 <- gsub(";L2_.*", "", allsigs$Food)
allsigs$FoodL1 <- gsub("L1_", "", allsigs$FoodL1)
fix.names.family <- function(x) {
x <- gsub(";g__.*", "", x)
x <- gsub("?.*f__", "", x)
x <- gsub("?.*o__", "Uncl. Order", x)
x <- gsub("?.*p__", "Uncl. Phylum ", x)
x <- gsub("?.*k__", "Uncl. Kingdom ", x)
x <- gsub(";NA", "", x)
x <- gsub("\\[", "", x)
x <- gsub("\\]", "", x)
x <- gsub("-", "_", x)
x <- gsub("\\/", "_", x)
return(x)
}
fix.names.species <- function(x) {
x <- gsub("?.*s__", "", x)
x <- gsub("?.*g__", "Uncl. Genus ", x)
x <- gsub("?.*f__", "Uncl. Family ", x)
x <- gsub("?.*o__", "Uncl. Order ", x)
x <- gsub("?.*p__", "Uncl. Phylum ", x)
x <- gsub(";NA", "", x)
return(x)
}
allsigs$Family<- fix.names.family(allsigs$Taxa)
allsigs$Family <- ifelse(allsigs$Family == "", allsigs$Taxa, allsigs$Family)
allsigs$Family <- gsub(";f.*", "", allsigs$Family)
allsigs$Family <- gsub("?.*o__", "Uncl. Order ", allsigs$Family)
allsigs$Species <- fix.names.species(allsigs$Taxa)
allsigs$bin <- ifelse(allsigs$Correlation < -0.65, "Negative (+/-)",
ifelse(allsigs$Correlation > 0.65, "Positive (+/+ or -/-)", "NA"))
allsigs$bin <- factor(allsigs$bin, levels = c("Positive (+/+ or -/-)", "Negative (+/-)"))
allsigs$FoodL1 <- gsub("Dry_Beans_Peas_Other_Legumes_Nuts_and_Seeds", "Legumes", allsigs$FoodL1)
allsigs$FoodL1 <- gsub("Fats_Oils_and_Salad_Dressings", "Fats", allsigs$FoodL1)
allsigs$FoodL1 <- gsub("Grain_Product", "Grains", allsigs$FoodL1)
allsigs$FoodL1 <- gsub("Milk_and_Milk_Products", "Milks", allsigs$FoodL1)
allsigs$FoodL1 <- gsub("Meat_Poultry_Fish_and_Mixtures", "Meats", allsigs$FoodL1)
allsigs$FoodL1 <- gsub("Sugars_Sweets_and_Beverages", "Sweets and Beverages", allsigs$FoodL1)
# load colors
source(file = "../../../lib/colors/UserNameColors.R")
## get information to label key values repeated in more than one person for labeling
allsigs_names <- allsigs[colnames(allsigs) %in% c("Food", "Taxa")]
allsigs_names_pairs <- paste(allsigs_names$Food, allsigs_names$Taxa)
names_repeated<-as.data.frame(table(allsigs_names_pairs))
names_repeated<- subset(names_repeated, names_repeated$Freq >2)
table(names_repeated$Freq)
names_repeated <- colsplit(names_repeated$allsigs_names_pairs, " ", c("Food", "Taxa"))
names_repeated$label <- "*"
allsigs <- merge(allsigs, names_repeated, all.x = T)
allsigs$ID <- gsub("MCTs", "", allsigs$ID)
table(allsigs$ID)
length(table(allsigs$ID))
names(UserNameColors) <- gsub("MCTs", "", names(UserNameColors))
require(ggplot2)
myplot <- ggplot(data = allsigs, aes(x = Correlation, y = Family, size = -log(fdr_pval), color = ID)) +
geom_point(alpha = 0.8) +
#geom_point(alpha = 0.8, color = "darkgrey", pch = 21) +
facet_grid(FoodL1~bin, scales = "free", space = "free_y")+
scale_color_manual(values = UserNameColors) +
theme_classic() +
guides(color = guide_legend(nrow = 10, title = "Subject", title.position = "top"),
size = guide_legend(title.position = "top", title = "-log(FDR p-value)")) +
theme(legend.position = "right",
axis.text.y = element_text(size = 5, color = "black"),
axis.text.x = element_text(size = 6, color = "black"),
panel.grid.major = element_line(colour = "lightgrey"),
strip.text = element_text(size = 7, color = "black"),
axis.title = element_text(size = 12),
legend.text = element_text(size = 7),
legend.title = element_text(size = 8)) +
ylab("Family-level taxonomy classification") +
xlab("Spearman correlation") +
scale_x_continuous(trans = "reverse")
# L1_Meat_Poultry_Fish_and_Mixtures		#d43f1f
# L1_Grain_Product		#fe9700
# L1_Vegetables		#5dd047
# L1_Milk_and_Milk_Products	#00a2f2
# L1_Sugars_Sweets_and_Beverages	#c91acb
# L1_Fruits	#ffff59
# L1_Dry_Beans_Peas_Other_Legumes_Nuts_and_Seeds #662a00
# L1_Eggs	#a8863a
# L1_Fats_Oils_and_Salad_Dressings	#737373
sort(unique(allsigs$FoodL1))
library(grid)
g <- ggplot_gtable(ggplot_build(myplot))
strip_both <- which(grepl('strip-', g$layout$name))
fills <- c("white",
"white",
"#a8863a", #eggs
"#7d7d7d", #fats
"#ffff59",# fruits
"#fe9700",#grains
"#a14200",#legumes
"#d43f1f",#meats
"#00a2f2",#milk
"#c91acb",#sugar
"#5dd047"#vege
)
k <- 1
for (i in strip_both) {
j <- which(grepl('rect', g$grobs[[i]]$grobs[[1]]$childrenOrder))
g$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill <- fills[k]
k <- k+1
}
# Fix labeling for export table
export <- subset(allsigs, allsigs$label == "*")
export$Food <- gsub(".*L2_", "", export$Food)
export <- export[colnames(export) %in% c("Food", "Species", "Correlation", "Pvalue", "fdr_pval", "ID")]
export <- export[order(export$Food, export$Species),]
export <- export[,c("Food", "Species", "Correlation", "Pvalue", "fdr_pval", "ID")]
export$Correlation <- round(export$Correlation,2)
export$Pvalue <- ifelse(export$Pvalue < 0.001, "< 0.001", round(export$Pvalue,3))
export$fdr_pval <- signif(export$fdr_pval, 2)
export$ID <- gsub("MCTs", "", export$ID)
write.table(export, file = "../../../output/TableS2/Table S2_decay.txt",
sep = "\t",
col.names = T,
row.names = F,
quote = F)
# load data for these three subjects
# read in individual summarized food tables for each person and combine them
setwd("/Users/abby/Documents/Projects/dietstudy_analyses/data/procrustes/data_username_decay/")
source("../../../lib/colors/UserNameColors.R")
names(UserNameColors) <- gsub("MCTs", "", names(UserNameColors))
# read all food files into a list
temp <- list.files(pattern = "*_food.txt")
foods_3d <- lapply(temp, function(x) read.delim(x, row.names = "taxonomy"))
foods_3d <- lapply(foods_3d, function(x) x[!names(x) == "X.FoodID"])
names(foods_3d) <- gsub("_food.txt", "", temp)
split = strsplit(rownames(foods_3d[[1]]),";")
foodStrings = sapply(split,function(x) paste(x[1:2],collapse=";"))
foods_3d <- lapply(foods_3d, function(x) rowsum(x,foodStrings))
# read in tax files into a list
temp <- list.files(pattern = "*_tax.txt")
tax_3d <- lapply(temp, function(x) read.delim(x, row.names = 1))
names(tax_3d) <- gsub("_tax.txt", "", temp)
# limit to the people we are interested in and their foods
dkveg <- foods_3d[c("MCTs20", "MCTs18", "MCTs35")]
dkveg <- lapply(dkveg, function(x) x[rownames(x) == "L1_Vegetables;L2_Darkgreen_vegetables",])
bact <- tax_3d[c("MCTs20", "MCTs18", "MCTs35")]
bact <- lapply(bact, function(x) x[(grep("1_1_6", rownames(x))),])
dkveg <- unlist(dkveg)
bact <- unlist(bact)
plot = data.frame(darkveg = dkveg, bacteroides = bact)
plot$Subject <- substr(rownames(plot), 5,6)
plot$ID <- substr(rownames(plot), 8, length(rownames(plot)))
require(ggplot2)
myplot <- ggplot(data = plot, aes(x = bacteroides, y = darkveg)) +
geom_point(aes(color = Subject), size = 2) +
scale_color_manual(values = UserNameColors) +
geom_smooth(method = "lm", se = F, color = "black", size = 0.5) +
facet_grid(.~Subject, scales = "free") +
theme_classic() +
xlab("Bacteroides sp. 1 1 6\n(CLR adjusted abundance)") +
ylab("Vegetables: Darkgreen vegetables\n(dry weight, g)") +
theme(axis.title = element_text(size = 6),
axis.text = element_text(size = 3),
legend.position = "none",
strip.text = element_text(size = 6),
panel.grid.major = element_line(colour = "lightgrey"))
myplot
myplot <- ggplot(data = plot, aes(x = bacteroides, y = darkveg)) +
geom_point(aes(color = Subject), size = 2) +
scale_color_manual(values = UserNameColors) +
geom_smooth(method = "lm", se = F, color = "black", size = 0.5) +
facet_grid(.~Subject, scales = "free_y") +
theme_classic() +
xlab("Bacteroides sp. 1 1 6\n(CLR adjusted abundance)") +
ylab("Vegetables: Darkgreen vegetables\n(dry weight, g)") +
theme(axis.title = element_text(size = 6),
axis.text = element_text(size = 3),
legend.position = "none",
strip.text = element_text(size = 6),
panel.grid.major = element_line(colour = "lightgrey"))
myplot
myplot <- ggplot(data = plot, aes(x = bacteroides, y = darkveg)) +
geom_point(aes(color = Subject), size = 2) +
scale_color_manual(values = UserNameColors) +
geom_smooth(method = "lm", se = F, color = "black", size = 0.5) +
facet_grid(.~Subject, scales = "free") +
theme_classic() +
xlab("Bacteroides sp. 1 1 6\n(CLR adjusted abundance)") +
ylab("Vegetables: Darkgreen vegetables\n(dry weight, g)") +
theme(axis.title = element_text(size = 6),
axis.text = element_text(size = 3),
legend.position = "none",
strip.text = element_text(size = 6),
panel.grid.major = element_line(colour = "lightgrey"))
myplot
myplot <- ggplot(data = plot, aes(x = bacteroides, y = darkveg)) +
geom_point(aes(color = Subject), size = 2) +
scale_color_manual(values = UserNameColors) +
geom_smooth(method = "lm", se = F, color = "black", size = 0.5) +
facet_wrap(.~Subject, scales = "free") +
theme_classic() +
xlab("Bacteroides sp. 1 1 6\n(CLR adjusted abundance)") +
ylab("Vegetables: Darkgreen vegetables\n(dry weight, g)") +
theme(axis.title = element_text(size = 6),
axis.text = element_text(size = 3),
legend.position = "none",
strip.text = element_text(size = 6),
panel.grid.major = element_line(colour = "lightgrey"))
myplot
source('~/Documents/Projects/dietstudy_analyses/lib/results_scripts/4b_Food-species correlations/2_Figure4B-4C_new/4B_C_new.R', echo=TRUE)
myplot <- ggplot(data = plot, aes(x = `Bacteroides.oleiciplenus`, y = Pork)) +
geom_point(aes(color = Subject), size = 2) +
scale_color_manual(values = UserNameColors) +
geom_smooth(method = "lm", se = F, color = "black", size = 0.5) +
facet_wrap(.~Subject, scales = "free") +
theme_classic() +
xlab("Bacteroides oleiciplenus\n(CLR adjusted abundance)") +
ylab("Meats: Pork\n(dry weight, g)") +
theme(axis.title = element_text(size = 6),
axis.text = element_text(size = 3),
legend.position = "none",
strip.text = element_text(size = 6),
panel.grid.major = element_line(colour = "lightgrey"))
myplot
source('~/Documents/Projects/dietstudy_analyses/lib/results_scripts/4b_Food-species correlations/2_Figure4B-4C_new/4B_C_new.R', echo=TRUE)
