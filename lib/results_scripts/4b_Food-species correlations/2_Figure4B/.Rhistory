require(rmarkdown)
require(knitr)
require(RColorBrewer)
require(cowplot)
require(tidyverse)
require(stringr)
require(dplyr)
require(ape)
require(vegan)
opts_knit$set(root.dir = "/Users/abby/Documents/Projects/dietstudy/")
opts_chunk$set(echo = TRUE, fig.path = "Figs/", dev = c("png", "pdf"), dpi = 300)
map <- read.table("data/maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
map_username <- read.table("data/maps/UserName_map.txt", sep = "\t", header = T, comment = "")
# set up colors
cols <- brewer.pal(12, "Set3")
cols2 <- colorRampPalette(cols)
#tax_beta <- as.matrix(vegdist(t(tax), method = "bray", binary=FALSE, diag=FALSE, upper=FALSE, na.rm = FALSE))
#tax_beta <- as.matrix(vegdist(t(tax), method = "euclidian"))
tax_beta <- read.delim("data/greengenes/strain_beta/unweighted_unifrac_strain.txt")
View(tax_beta)
#tax_beta <- as.matrix(vegdist(t(tax), method = "bray", binary=FALSE, diag=FALSE, upper=FALSE, na.rm = FALSE))
#tax_beta <- as.matrix(vegdist(t(tax), method = "euclidian"))
tax_beta <- read.delim("data/greengenes/strain_beta/unweighted_unifrac_strain.txt", row.names = 1)
View(tax_beta)
tax_dist <- dist(tax_beta)
?dist()
tax_dist <- as.dist(tax_beta)
tax_pcoa <- pcoa(tax_dist)
tax_pcoa <- pcoa(tax_dist)$vectors
View(tax_pcoa)
ggplot(tax_pcoa, aes(x = Axis.1, y = Axis.2)) + geom_point()
tax_pcoa <- as.data.frame(pcoa(tax_dist)$vectors)
ggplot(tax_pcoa, aes(x = Axis.1, y = Axis.2)) + geom_point()
require(tibble)
# set wd
setwd(dir = "Documents/Projects/dietstudy/")
require(tibble)
# map
map <- read.table("data/maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
# set wd
setwd("Documents/Projects/dietstudy/")
# map
map <- read.table("Documents/Projects/dietstudy/data/maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
# map
map <- read.table("~/Documents/Projects/dietstudy/data/maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
# Read in burst output table for greengenes
taxa <- read.delim(file = "~/Documents/Projects/dietstudy/data/greengenes/strain.txt", row=1, stringsAsFactors = F, sep ="\t")
# clean up the names
#### Manicure the samplenames, grab latest (mct study only!)
colnames(taxa) = gsub(".S[0-9]+.R1.001","",colnames(taxa))      # Clean old plate IDs
taxa = taxa[,order(colnames(taxa))]              # Sort nicely by sample ID
taxa = taxa[,-(grep("L0",colnames(taxa))-1)]     # Keep new runs only
colnames(taxa) = gsub(".S[0-9]+.L001.R1.001","",colnames(taxa)) # Clean new plate IDs
taxa = taxa[order(rowMeans(taxa),decreasing=T),] # Sort by avg. abundance
# get names for subsetting
keep <- names(which(colSums(taxa) >= 23000))
# get names for subsetting
colSums(taxa)
# get names for subsetting
sort(colSums(taxa))
# get names for subsetting
order(colSums(taxa))
# get names for subsetting
sort(colSums(taxa))
# get names for subsetting from other data
keep <- read.delim(file = "~/Documents/Projects/dietstudy/data/processed_tax/taxonomy_clr_s.txt")
rownames(keep)
# get names for subsetting from other data
keep <- read.delim(file = "~/Documents/Projects/dietstudy/data/processed_tax/taxonomy_clr_s.txt", row.names = 1)
rownames(keep)
colnames(keep)
# get names for subsetting from other data
keep <- colnames(read.delim(file = "~/Documents/Projects/dietstudy/data/processed_tax/taxonomy_clr_s.txt", row.names = 1))
# add #taxonomy label
taxa <- rownames_to_column(taxa, var = "#taxonomy")
# subset table
taxa <- taxa[keep,]
require(tibble)
# set wd
setwd("Documents/Projects/dietstudy/")
# map
map <- read.table("~/Documents/Projects/dietstudy/data/maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
# Read in burst output table for greengenes
taxa <- read.delim(file = "~/Documents/Projects/dietstudy/data/greengenes/strain.txt", row=1, stringsAsFactors = F, sep ="\t")
# clean up the names
#### Manicure the samplenames, grab latest (mct study only!)
colnames(taxa) = gsub(".S[0-9]+.R1.001","",colnames(taxa))      # Clean old plate IDs
taxa = taxa[,order(colnames(taxa))]              # Sort nicely by sample ID
taxa = taxa[,-(grep("L0",colnames(taxa))-1)]     # Keep new runs only
colnames(taxa) = gsub(".S[0-9]+.L001.R1.001","",colnames(taxa)) # Clean new plate IDs
taxa = taxa[order(rowMeans(taxa),decreasing=T),] # Sort by avg. abundance
# get names for subsetting from other data
keep <- colnames(read.delim(file = "~/Documents/Projects/dietstudy/data/processed_tax/taxonomy_clr_s.txt", row.names = 1))
# subset table
taxa <- taxa[,keep]
# subset table
taxa <- taxa[,colnames(taxa) %in% keep]
# add #taxonomy label
taxa <- rownames_to_column(taxa, var = "#taxonomy")
View(taxa)
# set wd
setwd("Documents/Projects/dietstudy/")
# map
map <- read.table("~/Documents/Projects/dietstudy/data/maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
# Read in burst output table for greengenes
taxa <- read.delim(file = "~/Documents/Projects/dietstudy/data/greengenes/strain.txt", row=1, stringsAsFactors = F, sep ="\t")
# map
map <- read.table("~/Documents/Projects/dietstudy/data/maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
# Read in burst output table for greengenes
taxa <- read.delim(file = "~/Documents/Projects/dietstudy/data/greengenes/strain.txt", row=1, stringsAsFactors = F, sep ="\t")
# clean up the names
#### Manicure the samplenames, grab latest (mct study only!)
colnames(taxa) = gsub(".S[0-9]+.R1.001","",colnames(taxa))      # Clean old plate IDs
taxa = taxa[,order(colnames(taxa))]              # Sort nicely by sample ID
taxa = taxa[,-(grep("L0",colnames(taxa))-1)]     # Keep new runs only
colnames(taxa) = gsub(".S[0-9]+.L001.R1.001","",colnames(taxa)) # Clean new plate IDs
taxa = taxa[order(rowMeans(taxa),decreasing=T),] # Sort by avg. abundance
# get names for subsetting from other data
keep <- colnames(read.delim(file = "~/Documents/Projects/dietstudy/data/processed_tax/taxonomy_clr_s.txt", row.names = 1))
# subset table
taxa <- taxa[,colnames(taxa) %in% keep]
colnames(taxa) %in% keep
!colnames(taxa) %in% keep
colnames(taxa) !%in% keep
keep %in% colnames(taxa)
which(keep %in% colnames(taxa) == F)
colnames(keep)[which(keep %in% colnames(taxa) == F)]
colnames(taxa)[which(keep %in% colnames(taxa) == F)]
keep[which(keep %in% colnames(taxa) == F)]
check <- keep[which(keep %in% colnames(taxa) == F)]
# Read in burst output table for greengenes
taxa <- read.delim(file = "~/Documents/Projects/dietstudy/data/greengenes/strain.txt", row=1, stringsAsFactors = F, sep ="\t")
colnames(taxa) %in% check
# map
map <- read.table("~/Documents/Projects/dietstudy/data/maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
# Read in burst output table for greengenes
taxa <- read.delim(file = "~/Documents/Projects/dietstudy/data/greengenes/strain.txt", row=1, stringsAsFactors = F, sep ="\t")
# clean up the names
#### Manicure the samplenames, grab latest (mct study only!)
colnames(taxa) = gsub(".S[0-9]+.R1.001","",colnames(taxa))      # Clean old plate IDs
taxa = taxa[,order(colnames(taxa))]              # Sort nicely by sample ID
taxa = taxa[,-(grep("L0",colnames(taxa))-1)]     # Keep new runs only
colnames(taxa) = gsub(".S[0-9]+.L001.R1.001","",colnames(taxa)) # Clean new plate IDs
taxa = taxa[order(rowMeans(taxa),decreasing=T),] # Sort by avg. abundance
# get names for subsetting from other data
keep <- colnames(read.delim(file = "~/Documents/Projects/dietstudy/data/processed_tax/taxonomy_clr_s.txt", row.names = 1))
# subset table
taxa <- taxa[,colnames(taxa) %in% keep]
rowsums(taxa)
rowSums(taxa)
rowSums(taxa > 0)
# drop low abundance
taxa <- taxa[rowSums(taxa > 0) > 20,]
View(taxa)
rowMeans(taxa)
sort(rowMeans(taxa))
rownames(taxa)
taxa <- rownames_to_column(taxa, var = "#OTU")
require(tibble)
# map
map <- read.table("~/Documents/Projects/dietstudy/data/maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
# Read in burst output table for greengenes
taxa <- read.delim(file = "~/Documents/Projects/dietstudy/data/greengenes/strain.txt", row=1, stringsAsFactors = F, sep ="\t")
# clean up the names
#### Manicure the samplenames, grab latest (mct study only!)
colnames(taxa) = gsub(".S[0-9]+.R1.001","",colnames(taxa))      # Clean old plate IDs
taxa = taxa[,order(colnames(taxa))]              # Sort nicely by sample ID
taxa = taxa[,-(grep("L0",colnames(taxa))-1)]     # Keep new runs only
colnames(taxa) = gsub(".S[0-9]+.L001.R1.001","",colnames(taxa)) # Clean new plate IDs
taxa = taxa[order(rowMeans(taxa),decreasing=T),] # Sort by avg. abundance
# get names for subsetting from other data
keep <- colnames(read.delim(file = "~/Documents/Projects/dietstudy/data/processed_tax/taxonomy_clr_s.txt", row.names = 1))
# subset table
taxa <- taxa[,colnames(taxa) %in% keep]
# drop rare taxa
taxa <- taxa[rowSums(taxa > 0) > 20,]
taxa <- rownames_to_column(taxa, var = "#OTU")
# Write table to use with QIIME
write.table(taxa, file = "~/Documents/Projects/dietstudy/data/greengenes/strain.processed.txt", sep = "\t", quote = F, row.names = F)
